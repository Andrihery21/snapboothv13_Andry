import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

// Cr√©er un client Supabase
const supabaseUrl = process.env.REACT_APP_SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY || process.env.VITE_SUPABASE_ANON_KEY;
const serviceKey = process.env.SUPABASE_SERVICE_KEY; // Cl√© de service pour les op√©rations admin

if (!supabaseUrl || !supabaseKey) {
  console.error('Les variables d\'environnement Supabase ne sont pas d√©finies');
  process.exit(1);
}

// Utiliser la cl√© de service si disponible, sinon utiliser la cl√© anonyme
const key = serviceKey || supabaseKey;
const supabase = createClient(supabaseUrl, key);

// Fonction pour initialiser les √©crans
async function initScreens() {
  try {
    // V√©rifier si des √©crans existent d√©j√†
    const { data: existingScreens, error: checkError } = await supabase
      .from('screens')
      .select('*');
    
    if (checkError) {
      console.error('Erreur lors de la v√©rification des √©crans:', checkError.message);
      return;
    }
    
    if (existingScreens && existingScreens.length > 0) {
      console.log(`‚úÖ ${existingScreens.length} √©crans existent d√©j√†:`);
      existingScreens.forEach(screen => {
        console.log(`- ${screen.name} (${screen.type}): ${screen.id}`);
      });
      return existingScreens;
    }
    
    // Ins√©rer les √©crans
    const screens = [
      { name: '√âcran Vertical 1', type: 'vertical_1', location: 'Entr√©e' },
      { name: '√âcran Vertical 2', type: 'vertical_2', location: 'Zone centrale' },
      { name: '√âcran Vertical 3', type: 'vertical_3', location: 'Zone VIP' },
      { name: '√âcran Horizontal 1', type: 'horizontal_1', location: 'Espace principal' }
    ];
    
    const { data, error } = await supabase
      .from('screens')
      .insert(screens)
      .select();
    
    if (error) {
      console.error('Erreur lors de l\'insertion des √©crans:', error.message);
      return [];
    }
    
    console.log(`‚úÖ ${data.length} √©crans ins√©r√©s avec succ√®s:`);
    data.forEach(screen => {
      console.log(`- ${screen.name} (${screen.type}): ${screen.id}`);
    });
    
    return data;
  } catch (error) {
    console.error('Erreur non g√©r√©e:', error);
    return [];
  }
}

// Fonction pour cr√©er un √©v√©nement de test
async function createTestEvent() {
  try {
    // V√©rifier si des √©v√©nements existent d√©j√†
    const { data: existingEvents, error: checkError } = await supabase
      .from('events')
      .select('*');
    
    if (checkError) {
      console.error('Erreur lors de la v√©rification des √©v√©nements:', checkError.message);
      return;
    }
    
    if (existingEvents && existingEvents.length > 0) {
      console.log(`‚úÖ ${existingEvents.length} √©v√©nements existent d√©j√†:`);
      existingEvents.forEach(event => {
        console.log(`- ${event.name}: ${event.id}`);
      });
      return existingEvents[0];
    }
    
    // Cr√©er un √©v√©nement de test
    const { data, error } = await supabase
      .from('events')
      .insert({
        name: '√âv√©nement de test',
        description: '√âv√©nement cr√©√© pour tester la configuration',
        is_active: true
      })
      .select();
    
    if (error) {
      console.error('Erreur lors de la cr√©ation de l\'√©v√©nement de test:', error.message);
      return null;
    }
    
    console.log('‚úÖ √âv√©nement de test cr√©√© avec succ√®s:', data[0].id);
    return data[0];
  } catch (error) {
    console.error('Erreur non g√©r√©e:', error);
    return null;
  }
}

// Fonction principale
async function main() {
  console.log('üîß Initialisation des √©crans et √©v√©nements...');
  
  // Initialiser les √©crans
  const screens = await initScreens();
  
  // Cr√©er un √©v√©nement de test
  const event = await createTestEvent();
  
  if (screens.length > 0 && event) {
    console.log('\n‚úÖ Initialisation termin√©e avec succ√®s');
    console.log(`\nPour utiliser ces donn√©es dans l'application, assurez-vous que l'ID de l'√©v√©nement (${event.id}) est stock√© dans localStorage.`);
    console.log('Vous pouvez l\'ajouter avec la commande suivante dans la console du navigateur:');
    console.log(`localStorage.setItem('admin_selected_event_id', '${event.id}');`);
  } else {
    console.log('\n‚ùå Initialisation incompl√®te');
  }
}

// Ex√©cuter le script
main();
